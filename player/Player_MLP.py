import numpy as np

class Player_mlp:

    def __init__(self, stone, name,education_board):#_input, _hidden, _output):
        self.stone = stone
        self.name = name
        # 6 x 6 boad
        # w = np.array([-1.17448615,0.26475563,0.42333001,0.34145203,
        #         0.25778705,-1.42550257,0.9341622,-1.13791701,0.63917819,
        #         0.07596222,1.69409977,-1.2905363,-0.60088638,1.6749146, 
        #         0.93561457,0.36044998,0.3849146,0.67125101,
        #         1.27039982,-0.19530392,0.38662152,0.27521142,0.10940293,
        #         0.71371939,1.66972548,0.65525026,1.38721069,1.47977751,
        #         0.23732694,0.61838085,1.02464866,-0.02294705,0.44596202,0.61808322,
        #         -0.29653466,1.42030596,1.65506361,-2.02411044,0.45884252,0.43182706,
        #         1.51699567,-1.13535444,0.7968491,-0.4876546,-0.31745298,-0.32399225,
        #         0.02453252,-0.15951232,0.73740399,2.6269414,-0.61305915,-0.93606543,
        #         0.86552975,-0.86845035,-0.19837403,-1.34127067,-0.15641828,-1.65221325,
        #         0.68793019,-1.00727892,-0.79002546,-0.8878588,-0.50089247,-1.12281585,
        #         -0.64417158,-1.482739,-0.19022901,-1.29740212,0.34128672,-0.81582793])
        # self.w1, self.w2 = w[:60], w[60:]

        # 4 x 4
        # w = np.array([-0.33535473, 0.30029107, -0.23396422, -0.49640686, -0.71684594, 
        #     -0.03984251, -1.55352635, -1.22801077, 0.44869901, 0.72285426, -1.44327019, 
        #     0.00734402, 1.77273628, -0.42054686, 0.01636272, 0.13111692, -1.18758007, 
        #     -0.17682017, 1.10768411, 0.19930388, 0.52612936, -1.13963483, -1.0879156, 
        #     -0.52036825, 2.20621131, 0.38511168, 0.20790655, 1.61507088, -0.30999105, 
        #     1.36428269, 0.49013519, -0.63795282, -1.94804799, 0.89194646, -0.56373199,
        #      -0.72869236, 0.58216708, -0.22515445, 0.16988893, -0.28088192, -0.76161853, 
        #      -0.51610792, 0.35100092, 0.65642015, 2.38894628, 1.29696616, -0.25468555, 
        #      0.60759371, -0.8616555, -1.85142708, 0.27300199, 0.17100998, 0.1171176, 
        #      0.23084161, -0.37412063, -1.12228435, -0.24074538, 1.0679434, 1.4212031, 
        #      0.24508081])

        w = np.array([0.6857398693320027, -1.8299895342228996, 0.8779696524977132, 
            -0.47642977495814937, -0.6584869187231326, -0.24616985221177495, 
            -1.6446904310669868, 1.1012642771234782, -0.36546913723713864, 
            0.8074613581754966, -0.6209181723655413, -1.5095771999865104, 
            0.6456709236674804, -0.781376178786646, -0.25190656614918144, 
            0.45351344366789914, -0.3972979941984752, 0.8150582157630797, 
            0.28230744188772566, -1.5164634719091148, 1.776699537706976, 
            0.029143909555548266, -0.44100960041590964, -0.023087291296040858, 
            -0.10795731346569884, -0.4611996966099241, -0.7236686977796297, 
            0.6990617475638111, -0.2429245236801015, 1.6194530381650676, 
            -0.41211867912058786, 0.2781361317336636, 0.22949023605280439, 
            0.29743242575278656, -0.24903990748797192, -0.5386457130909856, 
            0.9580266183731685, 0.8356186999752802, 1.5784593041741652, 
            -0.247259364019153, 0.19013444137100732, -0.8089741925757417, 
            0.28425428161237476, -0.7848862567327483, 1.0863107181900185, 
            -0.4702280760927916, -0.05466019173166408, -1.2494757977165114, 
            -0.38422349622043456, 0.47700728261312164, 1.16454647956815, 
            -0.6846952382601427, 0.20883467320912544, 1.3760816044761839, 
            0.24925938275402754, -0.7041074204712057, -0.42621200197005893, 
            0.29196552496319816, 1.2226157554163402, -0.7172493531540964])
        self.w1, self.w2 = w[:50], w[50:]

    def split_list(self,l,n):
        a = len(l)
        return [l[i:i+n] for i in range(0,a,n)]
        
    def play(self, board):
        self.W1 = np.array(self.split_list(self.w1,10))
        self.W2 = np.array(self.split_list(self.w2,1))
        availables = board.availables(self.stone)
        return self.think(board, availables)
    
    def get_w(self):
        return W1, W2
